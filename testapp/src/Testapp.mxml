<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark">

  <fx:Script>
    import flash.sampler._getInvocationCount;

    import flash.utils.ByteArray;

    import org.as3commons.bytecode.abc.AbcFile;
    import org.as3commons.bytecode.abc.AbcFile;
    import org.as3commons.bytecode.abc.ClassInfo;
    import org.as3commons.bytecode.abc.InstanceInfo;
    import org.as3commons.bytecode.abc.LNamespace;
    import org.as3commons.bytecode.abc.MethodInfo;
    import org.as3commons.bytecode.abc.MethodTrait;
    import org.as3commons.bytecode.abc.QualifiedName;
    import org.as3commons.bytecode.abc.TraitInfo;

    import org.as3commons.bytecode.abc.enum.MultinameKind;
    import org.as3commons.bytecode.abc.enum.NamespaceKind;
    import org.as3commons.bytecode.emit.IAbcBuilder;
    import org.as3commons.bytecode.emit.IClassBuilder;
    import org.as3commons.bytecode.emit.IPackageBuilder;
    import org.as3commons.bytecode.emit.impl.AbcBuilder;
    import org.as3commons.bytecode.io.AbcSerializer;
    import org.as3commons.bytecode.reflect.ByteCodeType;
    import org.as3commons.bytecode.swf.AbcClassLoader;
    import org.as3commons.bytecode.swf.SWFFile;
    import org.as3commons.bytecode.swf.SWFFileIO;
    import org.as3commons.bytecode.tags.DoABCTag;

    import org.as3commons.bytecode.tags.ISWFTag;
    import org.as3commons.bytecode.util.AbcFileUtil;

    import mx.utils.ObjectUtil;

    private function handleProgress(event:ProgressEvent):void
    {
      if (event.bytesLoaded >= event.bytesTotal)
      {
        trace('all mylib bytes have been loaded');

        var classes:Array = ByteCodeType.definitionNamesFromLoader(event.currentTarget as LoaderInfo);
        (event.currentTarget as LoaderInfo).removeEventListener(ProgressEvent.PROGRESS, handleProgress);
        var io:SWFFileIO = new SWFFileIO();
        var swfFile:SWFFile = io.read((event.currentTarget as LoaderInfo).bytes);

        var replacementSwfFile:SWFFile = new SWFFile();

        for each(var tag:DoABCTag in swfFile.getTagsByType(DoABCTag))
        {
          for each (var instanceInfo:InstanceInfo in (tag as DoABCTag).abcFile.instanceInfo)
          {
            if (instanceInfo.classInfo.classMultiname.name == "Foo")
            {
              for each (var traitInfo:TraitInfo in instanceInfo.traits)
              {
                if (traitInfo.traitMultiname.name == "getPrivateBar")
                {
                  var methodInfo:MethodInfo = (traitInfo as MethodTrait).traitMethod;

                  methodInfo.as3commonsBytecodeName.nameSpace = LNamespace.PUBLIC;
                  methodInfo.scopeName = methodInfo.as3commonsBytecodeName.nameSpace.kind.description;

                  var abcSerializer:AbcSerializer = new AbcSerializer();
                  var newByteArray:ByteArray = abcSerializer.serializeAbcFile(tag.abcFile);

                  var newSwfByteArray:ByteArray = AbcFileUtil.wrapBytecodeInSWF([newByteArray]);
                  (event.currentTarget as LoaderInfo).loader.loadBytes(newSwfByteArray);
                }
              }

            }

          }
        }
      }
    }

    private function handleInit(event:Event):void
    {
      trace('init');

      var classes:Array = ByteCodeType.definitionNamesFromLoader(event.currentTarget as LoaderInfo);
      trace('mylib contains: ' + classes.toString());
    }

    private function handleComplete(event:Event):void
    {
      trace("complete");
      var fc:Class = (event.currentTarget as LoaderInfo).applicationDomain.getDefinition("blah.Foo") as Class;
      var foo:* = new fc();
      var s:String = foo.getPrivateBar();
      trace("foo.getPrivateBar() = " + s);
    }
  </fx:Script>

  <s:applicationComplete>
        trace('now loading the original swf with a Loader');
        // now load mylib
        var mylibReq:URLRequest = new URLRequest("mylib.swf");
        var mll:Loader = new Loader();
        mll.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, handleProgress);

        mll.contentLoaderInfo.addEventListener(Event.INIT, handleInit);

        mll.contentLoaderInfo.addEventListener(Event.COMPLETE, handleComplete);

        mll.load(mylibReq);
  </s:applicationComplete>

</s:Application>